#+title: Nix geht √ºber Docker
#+author: Johannes Maier
#+REVEAL_PLUGINS: (notes)
#+REVEAL_THEME: ./css/themes/active.css
#+REVEAL_HLEVEL: 100
#+REVEAL_TRANS: none
#+OPTIONS: toc:nil num:nil reveal_center:nil H:4

* Ziel

- Teaser f√ºr Nix

#+begin_notes
- Active Group -> arbeiten ausschlie√ülich mit funktionaler
  Programmierung -> auch wir haben aber mit DevOps zu tun -> wollen
  funktionale DevOps -> Tool namens Nix
- Viele Arten, Nix zu motivieren (reproduzierbare Builds, tolle
  Deployment-Story, portable Dotfiles mit Paketen, NixOS uvm.)
- Eigentlich keine Zeit f√ºr "was macht Nix, wie macht Nix, was es tut?"
- -> viele Leute kennen Docker -> "Docker als Motivation f√ºr Nix"
- -> Pain-Points bekannt -> Nix kann helfen
#+end_notes

* Ausgangssituation

Unsere Anwendung / Services

#+begin_src plantuml :file plantuml/output/c4.png
@startuml
!include plantuml/plugins/C4_Container.puml

LAYOUT_LEFT_RIGHT()

Container(goBackend, "Calculator service (Go)")
Container(haskellBackend, "Caching service (Haskell)")
Container(client, "Client (Python)")
Rel(client, goBackend, "requests calculation of a * b")
Rel(goBackend, haskellBackend, "asks cache for existing result")
Rel(goBackend, haskellBackend, "adds new results")

@enduml
#+end_src

* Ausgangssituation

Unsere Anwendung / Services

#+begin_src plantuml :file plantuml/output/c4.png
@startuml
!include plantuml/plugins/C4_Container.puml

LAYOUT_LEFT_RIGHT()

Container(goBackend, "Calculator service (Go)")
Container(haskellBackend, "Caching service (Haskell)")
Container(client, "Client (Python)")
Rel(client, goBackend, "requests calculation of a * b")
Rel(goBackend, haskellBackend, "asks cache for existing result")
Rel(goBackend, haskellBackend, "adds new results")

@enduml
#+end_src

‚ûú Annahme: Soll als Docker-Komposition aus drei Images ausgeliefert
  werden

#+begin_notes
=./scripts/run_naive ...= hier zeigen
#+end_notes

* Anforderungen an Auslieferung

1. Minimalit√§t bzgl.
   - Gr√∂√üe
   - installierter Software
2. Reproduzierbarkeit
3. Effizientes Bauen (Caching)
4. Evtl. festes Basisimage ("nur Debian erlaubt")

* Dockerfile des Caching-Service

#+begin_src dockerfile
FROM ubuntu

COPY . .
RUN apt-get update
RUN apt-get install -y cabal-install zlib1g-dev
RUN cabal update
RUN cabal build
CMD cabal run
#+end_src

Probleme?

* Dockerfile des Caching-Service

#+begin_src dockerfile
# Basisimage nicht gepinnt -> Reproduzierbarkeit
FROM ubuntu

COPY . .
RUN apt-get update
RUN apt-get install -y cabal-install zlib1g-dev
RUN cabal update
RUN cabal build
CMD cabal run
#+end_src

* Dockerfile des Caching-Service

#+begin_src dockerfile
# Basisimage nicht gepinnt -> Reproduzierbarkeit
FROM ubuntu

# Zu fr√ºh -> zerst√∂rt Caching
COPY . .
RUN apt-get update
RUN apt-get install -y cabal-install zlib1g-dev
RUN cabal update
RUN cabal build
CMD cabal run
#+end_src

* Dockerfile des Caching-Service

#+begin_src dockerfile
# Basisimage nicht gepinnt -> Reproduzierbarkeit
FROM ubuntu

# Zu fr√ºh -> zerst√∂rt Caching
COPY . .

# - Wird einzeln gecacht, daher bei √Ñnderungen danach nicht neu ausgef√ºhrt
# - Reproduzierbarkeit unm√∂glich
RUN apt-get update
RUN apt-get install -y cabal-install zlib1g-dev

RUN cabal update
RUN cabal build
CMD cabal run
#+end_src

* Dockerfile des Caching-Service

#+begin_src dockerfile
# Basisimage nicht gepinnt -> Reproduzierbarkeit
FROM ubuntu

# Zu fr√ºh -> zerst√∂rt Caching
COPY . .

# - Wird einzeln gecacht, daher bei √Ñnderungen danach nicht neu ausgef√ºhrt
# - Reproduzierbarkeit unm√∂glich
RUN apt-get update
RUN apt-get install -y cabal-install zlib1g-dev

# S.o.
RUN cabal update
RUN cabal build

CMD cabal run
#+end_src

* Dockerfile des Caching-Service

#+begin_src dockerfile
# Basisimage nicht gepinnt -> Reproduzierbarkeit
FROM ubuntu

# Zu fr√ºh -> zerst√∂rt Caching
COPY . .

# - Wird einzeln gecacht, daher bei √Ñnderungen danach nicht neu ausgef√ºhrt
# - Reproduzierbarkeit unm√∂glich
RUN apt-get update
RUN apt-get install -y cabal-install zlib1g-dev

# S.o.
RUN cabal update
RUN cabal build

# Hier sollte das gebaute Binary laufen und cabal unn√∂tig sein
CMD cabal run
#+end_src

* Dockerfile des Caching-Service

#+begin_src dockerfile
# Basisimage nicht gepinnt -> Reproduzierbarkeit
FROM ubuntu

# Zu fr√ºh -> zerst√∂rt Caching
COPY . .

# - Wird einzeln gecacht, daher bei √Ñnderungen danach nicht neu ausgef√ºhrt
# - Reproduzierbarkeit unm√∂glich
RUN apt-get update
RUN apt-get install -y cabal-install zlib1g-dev

# S.o.
RUN cabal update
RUN cabal build

# Hier sollte das gebaute Binary laufen und cabal unn√∂tig sein
CMD cabal run
#+end_src

- Keine Minimalit√§t wegen unn√∂tig enthaltener Software

* Zweiter Versuch

#+REVEAL_HTML: <div style="font-size: 80%;">

#+begin_src dockerfile
FROM haskell@sha256:f99b7e5417f75089b53e1077a68c6333c48b82aff478a8af292a7b7f8e541832

WORKDIR /build

COPY haskell-backend.cabal ./
COPY src-exe src-exe
RUN cabal update && cabal install

# Multi-stage build
FROM ubuntu@sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d

RUN apt-get update && apt-get install -y zlib1g-dev

# Benutzer und Gruppe anlegen
RUN useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1001 prod
USER prod

COPY --from=0 /root/.cabal/bin/haskell-backend ./
CMD [ "./haskell-backend" ]
#+end_src

#+REVEAL_HTML: </div>

* Zweiter Versuch: Analyse

#+begin_src dockerfile
FROM haskell@sha256:f99b7e5417f75089b53e1077a68c6333c48b82aff478a8af292a7b7f8e541832
...
#+end_src

- Feste Version der ben√∂tigten Tools ‚ûú besser

* Zweiter Versuch: Analyse

#+begin_src dockerfile
...
COPY haskell-backend.cabal ./
COPY src-exe src-exe
...
#+end_src

- Nur das N√∂tigste (vermutlich!) ‚ûú besser

* Zweiter Versuch: Analyse

#+begin_src dockerfile
...
RUN cabal update && cabal install
...
#+end_src

- Verlassen uns auf Abh√§ngigkeitsmanagement bzw. Pinning durch =cabal=

* Zweiter Versuch: Analyse

#+begin_src dockerfile
...
FROM ubuntu@sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d
...
#+end_src

- Feste Basis ‚ûú besser
- Minimalit√§t?

* Zweiter Versuch: Analyse

#+begin_src dockerfile
...
RUN apt-get update && apt-get install -y zlib1g-dev
...
#+end_src

Ben√∂tigte Laufzeitabh√§ngigkeiten üòû

* Zweiter Versuch: Analyse

#+begin_src dockerfile
...
RUN useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1001 prod
USER prod
...
#+end_src

- Service l√§uft unter dediziertem User, nicht =root= ‚ûú besser

* Zweiter Versuch: Analyse

#+begin_src dockerfile
...
COPY --from=0 /root/.cabal/bin/haskell-backend ./
CMD [ "./haskell-backend" ]
...
#+end_src

- Lediglich fertiges Binary enthalten aus vorigem Build

* Zweiter Versuch: Fazit

- Probleme beim Erstellen des =Dockerfile=: Laufzeitabh√§ngigkeiten
  fehlen oder unpassend!
- =alpine= nicht einfach m√∂glich (=musl= vs. =libc=, andere
  Bibliotheken/Versionen)
- Anzahl Pinning-Mechanismen = Anzahl Tools, Sprachen etc.

* Zweiter Versuch: Fazit

- Probleme beim Erstellen des =Dockerfile=: Laufzeitabh√§ngigkeiten
  fehlen oder unpassend! +*(Reproduzierbarkeit)*+
- =alpine= nicht einfach m√∂glich (=musl= vs. =libc=, andere
  Bibliotheken/Versionen) +*(Minimalit√§t)*+
- Anzahl Pinning-Mechanismen = Anzahl Tools, Sprachen
  etc. +*(Reproduzierbarkeit)*+

#+begin_notes
- Tools bedeutet nicht unbedingt "zur Entwicklung"
- Sobald Docker eingesetzt wird, kommen idR min. 2 Tools hinzu, zB
  Docker + Package-Manager
#+end_notes

* Zweiter Versuch: Fazit

‚ûú Gute Dockerfiles m√∂glich, aber sehr schwer zu schreiben

‚ûú Je robuster/"besser" das Dockerfile, desto h√∂her der Wartungsaufwand

#+begin_notes
- √Ñndere ich was an meinen gelockten Versionen im Service, kann es
  sein, dass die zlib-Version, die √ºber Apt installiert wurde, nicht
  passt
- Punkt, der mir wichtig ist:
#+end_notes

* Zweiter Versuch: Fazit

‚ûú Gute Dockerfiles m√∂glich, aber sehr schwer zu schreiben

‚ûú Je "besser" das Dockerfile, desto h√∂her der Wartungsaufwand

‚ûú *Weicht i.d.R. von Entwicklungsumgebung ab (lokales Debugging?)*

#+begin_notes
- Falls identische Versionen aller Tools und Abh√§ngigkeiten in Prod
  und Dev, kann ich Probleme lokal nachvollziehen und debuggen
- An dieser Stelle kommt Nix ins Spiel
#+end_notes

* Abh√§ngigkeitsmanagement mit Nix!

https://nixos.org

- Package-Manager f√ºr "Bauanleitungen" (sprachagnostisch)
- Monorepo =nixos/nixpkgs=
- Programmiersprache
- (Betriebssystem: NixOS)

=> Abh√§ngigkeitsgraph(en) unserer Programme bekannt und fixiert

#+begin_notes
- Packages werden von tausenden Contributors gepflegt
- Kriegen Reproduzierbarkeit in den Griff: sowohl lokal als auch in
  Docker
- Wir schauen mal, wo wir landen; Minimalit√§t sp√§ter
- Toll, falls m√∂glichst wenige Tools eingesetzt werden m√ºssen
#+end_notes

* Nix-Store

- =/nix/store=: read-only-FS
- Neue Version, neuer Hash, neuer Pfad
- Store ist Cache

#+begin_notes
- Bauanleitungen f√ºr alles
- Idee: Wenn ich wei√ü, was beteiligt ist, wei√ü ich, wann ich etwas neu
  bauen muss
- Kann Pakete damit "indizieren" (Hash)
- =cache.nixos.org=
#+end_notes

* Bauanleitungsbeispiel

#+begin_src nix
{ pkgs }:

pkgs.stdenv.mkDerivation {
  pname = "my-example";
  version = "0.1.0";
  src = ./.;
  buildInputs = [ pkgs.gnumake pkgs.gcc ];
  buildPhase = "make";
  installPhase = ''
    make install
    cp -r myResult $out
  '';
}
#+end_src

#+begin_notes
- lazy und funktional, obskur (lazy -> bauen nur das, was wir brauchen)
- Key-Value-Paare als Basiskonstrukt
- =src= kann alles M√∂gliche sein, idR Ordner oder Archive
- Bauvorgang √§hnlich zu Docker-Build: "sandboxed", pure
- =$out= Pfad in Store; Maschinerie hat Hash bereits erstellt (FIXME)
#+end_notes

* In der Praxis

- =mkDerivation= low-level
- DSLs f√ºr viele Programmiersprachen, Shell-Skripte etc.

* Nixify it: Haskell-Service

#+begin_src nix
{ pkgs }:

pkgs.haskellPackages.callCabal2nix "haskell-backend" ./. { }
#+end_src

#+begin_notes
- =nix-build haskell_backend= zeigen
- =touch haskell_backend/blub && ...=
- Haskell-Pakete: idR eins pro Version gemirrort in =nixpkgs=
- Entspricht der ersten Stage im Docker-Build -> fehlt noch "minimales
  Image, das das enthaelt"
#+end_notes

* Nixify it: Haskell-Service

Laufzeitabh√§ngigkeiten revisited:

#+begin_src shell
store_path=$(nix-build haskell_backend | tail -n 1)
echo $store_path

nix-store -qR $store_path

nix-store --export $(nix-store -qR $store_path) > closure
#+end_src

=closure= kann auf dem Zielsystem importiert werden.

#+begin_notes
- Einfach mit Nix-Installation, oder wenn Nix das System
  "kontrolliert"
- Geht aber auch ohne Nix (nix-bundle, =nix bundle=)
#+end_notes

* Wie funktioniert das (grob)?

Laufzeitabh√§ngigkeiten des Caching-Service ohne Nix

#+REVEAL_HTML: <div style="font-size: 60%;">

#+begin_src console
$ docker run --rm -it haskell-backend-1 ldd haskell-backend
linux-vdso.so.1 (0x00007ffc46f88000)
libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fee89f30000)
libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fee89f14000)
librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fee89f0f000)
libutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007fee89f0a000)
libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fee89f05000)
libgmp.so.10 => /lib/x86_64-linux-gnu/libgmp.so.10 (0x00007fee89e81000)
libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fee89c59000)
libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fee89b72000)
/lib64/ld-linux-x86-64.so.2 (0x00007fee89f39000)
#+end_src

#+REVEAL_HTML: </div>

* Wie funktioniert das (grob)?

Laufzeitabh√§ngigkeiten des Caching-Service mit Nix

#+REVEAL_HTML: <div style="font-size: 60%;">

#+begin_src console
$ ldd ~/path/to/haskell-backend
linux-vdso.so.1 (0x00007ffebdb24000)
libpthread.so.0 => /nix/store/ayrsyv7npr0lcbann4k9lxr19x813f0z-glibc-2.34-115/lib/libpthread.so.0 (0x00007fb3b72db000)
libz.so.1 => /nix/store/b36ilvc5hhfpcp7kv1kvrkgcxxpmxfsd-zlib-1.2.12/lib/libz.so.1 (0x00007fb3b72bd000)
libgmp.so.10 => /nix/store/qxrvrhlfaislinykki6qy6nqd4wv8mdp-gmp-with-cxx-6.2.1/lib/libgmp.so.10 (0x00007fb3b721c000)
libc.so.6 => /nix/store/ayrsyv7npr0lcbann4k9lxr19x813f0z-glibc-2.34-115/lib/libc.so.6 (0x00007fb3b701d000)
libm.so.6 => /nix/store/ayrsyv7npr0lcbann4k9lxr19x813f0z-glibc-2.34-115/lib/libm.so.6 (0x00007fb3b6f42000)
librt.so.1 => /nix/store/ayrsyv7npr0lcbann4k9lxr19x813f0z-glibc-2.34-115/lib/librt.so.1 (0x00007fb3b6f3d000)
libdl.so.2 => /nix/store/ayrsyv7npr0lcbann4k9lxr19x813f0z-glibc-2.34-115/lib/libdl.so.2 (0x00007fb3b6f38000)
libffi.so.8 => /nix/store/gm6q7jmajjmnwd29wgbq2jm3x37vsw3h-libffi-3.4.2/lib/libffi.so.8 (0x00007fb3b6f2b000)
/nix/store/ayrsyv7npr0lcbann4k9lxr19x813f0z-glibc-2.34-115/lib/ld-linux-x86-64.so.2 => /nix/store/ayrsyv7npr0lcbann4k9lxr19x813f0z-glibc-2.34-115/lib64/ld-linux-x86-64.so.2 (0x00007fb3b72e2000)
#+end_src

#+begin_notes
- Beim Bauen sind alle Abh√§ngigkeiten "da"
- Es werden die absoluten Pfade dazu hinterlegt
- Nix wandert rekursiv durch und sammelt genau das auf, was ben√∂tigt
  wird
- (Damit sind keine Build-Zeit-Abh√§ngigkeiten mehr da)
- Bei Deployment m√ºssen diese absoluten Pfade kopiert und am gleichen
  Pfad hinterlegt werden
#+end_notes

#+REVEAL_HTML: </div>

* Docker-Images mit Nix?

- Docker-Layers bestehen aus File-System-Diffs (Docker/OCI Image Format)
- Kennen "Abschluss" nixifizierter Anwendungen

‚ûú Kennen auch das Diff

‚ûú Nix kann Docker-Images erzeugen

#+begin_notes
- Gesamtes Diff -> muss ich nicht mehrere Layer anlegen; alles auf
  einen Rutsch
- geht auch ohne Docker-Installation -> super, wenn CI das Artefakt
  erstellen soll/muss! (kein DinD, kein =docker build=, nur =nix=)
#+end_notes

* Dockerize it: Haskell-Service

#+begin_src nix
{ pkgs }:

let haskellBackend = import ../haskell_backend/default.nix { inherit pkgs; };
in pkgs.dockerTools.buildImage {
  name = "haskell-backend";
  tag = "latest";
  config = {
    # Start the Haskell service as the CMD of the image
    Cmd = "${haskellBackend}/bin/haskell-backend";
  };
}
#+end_src

#+begin_notes
- Library =dockerTools=, Funktionen rund um Docker-Images
- =config= wie in OCI-Spezifikation, =docker inspect=
- Default: ein Layer, auch mit =contents=
#+end_notes

* Benutzung

#+begin_src shell
nix-build nix/haskell-docker-image.nix
docker load < result
#+end_src

* Nixify it: Go-Service und Python-Client

#+begin_src nix
{ pkgs }:

pkgs.buildGoModule {
  src = ./.;
  pname = "go_backend";
  version = "0.1.0";
  vendorSha256 = "sha256-pQpattmS9VmO3ZIQUFn66az8GSmB4IvYhTTCFn6SUmo=";
}
#+end_src

#+begin_src nix
{ pkgs }:

pkgs.poetry2nix.mkPoetryApplication {
  projectDir = ./.;
  python = pkgs.python310;
}
#+end_src

#+begin_notes
- Go hat eingebauten Vendoring-Mechanismus mit Pinning/Hash
#+end_notes

* Dockerize it: Go und Python

üòä

#+begin_notes
Zeigen: =./scripts/run_nix_setup_separate_services.sh=
#+end_notes

* Neue "Anforderung"

Beide Services in einem Image!

#+begin_notes
- Realbeispiel (wenn auch sinnlos)
- Zeigt Flexibilit√§t gegen√ºber Docker selbst
#+end_notes

* Dockerfile?

#+begin_src dockerfile
FROM haskell@sha256:f99b7e5417f75089b53e1077a68c6333c48b82aff478a8af292a7b7f8e541832

WORKDIR /build

COPY haskell-backend.cabal ./
COPY src-exe src-exe
RUN cabal update && cabal install

# Multi-stage build
FROM ubuntu@sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d

RUN apt-get update && apt-get install -y zlib1g-dev

# Benutzer und Gruppe anlegen
RUN useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1001 prod
USER prod

COPY --from=0 /root/.cabal/bin/haskell-backend ./
CMD [ "./haskell-backend" ]
#+end_src

#+begin_notes
- Kopieren Binaries zusammen -> erh√∂hen Chance auf Probleme bei
  Laufzeitabh√§ngigkeiten
- Beides parallel starten? -> Skript
- Was, wenn beide Services gleiche Abh. in untersch. Versionen
  brauchen??
#+end_notes

* Nix?

#+begin_src nix
let
  haskellBackend = import ../haskell_backend { inherit pkgs; };
  goBackend = import ../go_backend { inherit pkgs; };
  runScript = pkgs.writeShellScript "run" ''
    ${haskellBackend}/bin/haskell-backend &
    ${goBackend}/bin/server
  '';
in pkgs.dockerTools.buildImage {
  name = "both-backends";
  tag = "latest";
  config.Cmd = runScript;
}
#+end_src

#+begin_notes
- Image-Gr√∂√üen vergleichen
  - =docker images | grep haskell-backend=
  - =docker images | grep go-backend=
  - =docker images | grep haskell-backend=
- Nicht mal Tools wie =ls= enthalten
#+end_notes

* War's das?
* War's das?

- Minimal

* War's das?

- Minimal ‚úì

* War's das?

- Minimal ‚úì
- Reproduzierbar

* War's das?

- Minimal ‚úì
- +Reproduzierbar+ Pinning fehlt!

* War's das?

- Minimal ‚úì
- +Reproduzierbar+ Pinning fehlt!

#+begin_src nix
{ pkgs }:

pkgs.stdenv.mkDerivation {
  pname = "my-example";
  version = "0.1.0";
  src = ./.;
  buildInputs = [ pkgs.gnumake pkgs.gcc ];
  buildPhase = "make";
  installPhase = ''
    make install
    cp -r myResult $out
  '';
}
#+end_src

* Nixpkgs pinnen

Naiv:

#+begin_src nix
let
  pkgs = import (builtins.fetchTarball {
    name = "my-nixpkgs-pin";
    url =
      "https://github.com/nixos/nixpkgs/archive/87d34a6b8982e901b8e50096b8e79ebc0e66cda0.tar.gz";
    sha256 = "sha256:0dqjw05vbdf6ahy71zag8gsbfcgrf7fxz3xkwqqwapl0qk9xk47a";
  }) { };
in ...
#+end_src

* Nixpkgs pinnen

- https://github.com/nmattia/niv
- https://nixos.wiki/wiki/Flakes

* Vorteile

- Reproduzierbar und programmierbar!
- Eine Sprache f√ºr alles
- Reproduzierbare (Entwicklungs-)Umgebungen (=nix-shell= / =nix develop=)
  analog
- Riesige und hilfsbereite Community

#+begin_notes
- Auf √Ñnderungen an Gegebenheiten schnell reagieren
- Einfachere CI ohne Docker/DinD
- Einheitlich: selbe Befehle in CI wie auch lokal
- Trotzdem mehrere Tools in Dev n√∂tig nat√ºrlich
- Sind alles Vorteile von Nix, nicht von "Docker mit Nix" ->
  Docker-Images sind Nebenprodukt
#+end_notes

* Nix-H√ºrden

- Dokumentation
- Obskure Sprache (aber nicht schwer!)
- Lernkurve
- √ñkosystem bewegt sich sehr schnell
- Gro√üe Unterschiede bei Sprachunterst√ºtzung

#+begin_notes
- Abw√§gen, wann es sich lohnt, das einzusetzen
- Manche Sprachen/Build-Systeme clashen mit Sandboxing -> impure
#+end_notes

* Ausblicke / alternative Auslieferungsformate

Es existiert au√üerdem Unterst√ºtzung f√ºr:

- Portable =systemd=-Services
- OCI-Spezifikation
- AppImage
- Snap

* Ressourcen zum Einstieg in Nix

- Neu: https://zero-to-nix.com/
- Programmiersprachenspezifisch: https://nixos.org/manual/nixpkgs/stable/#chap-language-support

* Beispielrepo + Folien

- https://github.com/kenranunderscore/docker-mit-nix-talk
- (Auch Pr√§sentation ist Teil des Projekts und reproduzierbar)
